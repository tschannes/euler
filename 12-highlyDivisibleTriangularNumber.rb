=begin
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
=end

require './Timer.rb'

class Class

	include Timer

	def initialize(limit)
		@limit = limit
		super
	end

	def findFactors(number)
		factors = []
		current = 1
		half = number/2
		factor = number
		while current < factor
			if number % current == 0
				factor = number/current
				factors.push(current,factor)
				current += 1
			else
				current += 1
			end
		end
		factors = factors.sort{ |x,y| y <=> x }
		return factors
	end

	def count
		numFactors = 0
		n = 0
		triangle = 1
		
		while numFactors <= @limit
			#puts "Number of Dots in Triangle is: " + triangle.to_s
			#puts "Number of Factors is: " + findFactors(triangle).to_s
			numFactors = findFactors(triangle).uniq.length
			#puts "Number of Factors is " + numFactors.to_s
			break if numFactors >= @limit
			n += 1
			triangle = n * (n + 1)/2
		end
		
		puts "The first triangle with " + @limit.to_s + " or more divisors is " + triangle.to_s + "."
		return triangle
	end

	def run
		count
	end

end

x = Class.new(500)
x.run